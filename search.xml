<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fultter</title>
      <link href="/2019/11/04/fultter/"/>
      <url>/2019/11/04/fultter/</url>
      
        <content type="html"><![CDATA[<h1 id="fultter简介"><a href="#fultter简介" class="headerlink" title="fultter简介"></a>fultter简介</h1>]]></content>
      
      
      
        <tags>
            
            <tag> UI </tag>
            
            <tag> Android </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript 笔记</title>
      <link href="/2019/11/04/typescript/"/>
      <url>/2019/11/04/typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-简介"><a href="#TypeScript-简介" class="headerlink" title="TypeScript 简介"></a>TypeScript 简介</h1><p>TypeScript 并不是一个完全新的语言, 它是 JavaScript 的超集，为 JavaScript 的生态增加了类型机制，并最终将代码编译为纯粹的 JavaScript 代码。</p><p>TypeScript 由 Microsoft(算上 Angular 2 的话加上 Google)开发和维护的一种开源编程语言。 它支持 JavaScript 的所有语法和语义，同时通过作为 ECMAScript 的超集来提供一些额外的功能，如类型检测和更丰富的语法。下图显示了 TypeScript 与 ES5，ES2015，ES2016 之间的关系。</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2017/7/2/fa9c36fbf520cf0e0e66ebf71844275d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p><h1 id="TypeScript-数据类型"><a href="#TypeScript-数据类型" class="headerlink" title="TypeScript 数据类型"></a>TypeScript 数据类型</h1><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><p>一个保存字符串的文本，类型声明为 string。可以发现类型声明可大写也可小写，后文同理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let name: string = &apos;muyy&apos;</span><br><span class="line">let name2: String = &apos;muyy&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt 笔记</title>
      <link href="/2019/11/04/nuxt/"/>
      <url>/2019/11/04/nuxt/</url>
      
        <content type="html"><![CDATA[<h1 id="Nuxt-简介"><a href="#Nuxt-简介" class="headerlink" title="Nuxt 简介"></a>Nuxt 简介</h1><p>Nuxt 作为 Vue 官方文档中“服务端渲染”中推荐的框架，SSR 这种方式对于首屏加载的时间优化显而易见，同时可以方便地进行 SEO。</p><h1 id="Nuxt-优势"><a href="#Nuxt-优势" class="headerlink" title="Nuxt 优势"></a>Nuxt 优势</h1><p>1、项目不用再为路由划分而烦恼，你只需要按照对应的文件夹层级（Page 下）创建.vue 文件即可(相当于内部封装了 vue-router)。<br>2、项目无需考虑数据传输问题，nuxt 会在模板输出之后异步请求数据（需要引入 axios 库），而且对 vuex 有进一步的封装。<br>3、nuxt 内置了 webpack，省去了配置 webpack 的步骤，nuxt 会根据配置打包对应的文件。</p><a id="more"></a><h1 id="Nuxt-项目目录结构"><a href="#Nuxt-项目目录结构" class="headerlink" title="Nuxt 项目目录结构"></a>Nuxt 项目目录结构</h1><p>assets —————–资源目录，用于组织未编译的静态资源（如 less 或 sass）<br>components ————-组件目录，用于组织应用的 Vue.js 组件<br>layouts —————-布局目录，用于组织应用的布局组件<br>middleware ————-中间件目录，用于存放应用的中间件<br>pages ——————页面目录，用于组织应用的路由及视图<br>plugins —————-插件目录，用于组织那些需要在 vue.js 应用实例化之前需要运行的 JavaScript 插件<br>static —————–静态文件目录，用于存放应用的静态资源文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理<br>store ——————存储目录，用于组织应用的 vuex 状态树文件<br>nuxt.config.js ———用于组织 Nuxt.js 应用的个性化配置<br>package.json ———–用于描述应用的依赖关系和对外暴露的脚本接口</p><h1 id="Nuxt-渲染流程"><a href="#Nuxt-渲染流程" class="headerlink" title="Nuxt 渲染流程"></a>Nuxt 渲染流程</h1><p>具体流程如下：<br>1、调用 nuxtServerInit 方法<br>当请求开始进入时，最先调用的是 nuxtServerInit 方法，可以通过这个方法预先将服务器的数据保存，如已登录的用户信息，另外，这个方法也可以执行异步操作，并等待数据解析后返回。<br>2、Middleware 层<br>经过第一步后，请求会进入 Middleware 层，在该层中有三布操作：<br>·读取 nuxt.config.js 中的全局 middleware 字段的配置，并调用相应的中间件方法<br>·匹配并加载与请求相对应的 layout<br>·调用 layout 和 page 的中间件方法<br>3、调用 validate 方法<br>在这一步可以对请求参数进行校验，或是对第一步中服务器下发的数据进行校验，如果校验失败，将抛出 404 页面。<br>4、调用 fetch 及 asyncData 方法<br>这两个方法都会在组件加载之前被调用，它们的职责各有不同，asyncData 用来异步的进行组件数据的初始化工作，而 fetch 方法偏重于异步获取数据后修改 vuex 中的状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
